# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

##################################################################################
#
# Laravel API Response Builder Static code analysis Github Action config
#
# @package   MarcinOrlowski\ResponseBuilder
#
# @author    Marcin Orlowski <mail (#) marcinOrlowski (.) com>
# @copyright 2016-2022 Marcin Orlowski
# @license   http://www.opensource.org/licenses/mit-license.php MIT
# @link      https://github.com/MarcinOrlowski/laravel-api-response-builder
#
##################################################################################

name: "Integrate"

on:
  push:
    branches:
      - "master"
      - "dev"
  pull_request: null
  # Add [skip ci] to commit message to skip CI.

permissions: {}
# permissions: "read-all"
# permissions:
#   contents: "read"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  byte_level:
    name: "0️⃣ Byte-level"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check file permissions"
        run: |
          test "$(find . -type f -not -path './.git/*' -executable)" = ""

      - name: "Find non-printable ASCII characters"
        run: |
          ! LC_ALL=C.UTF-8 find . -type f -name '*.php' -not -path "./src/lang/*" -print0 \
            | xargs --null -- grep --perl-regexp --with-filename --line-number '[^ -~]' \
            | grep -v '// @ignore-non-ascii$'

  syntax_errors:
    name: "1️⃣ Syntax errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check source code for syntax errors"
        run: "composer exec -- parallel-lint src/"
        # @TODO Check template files for syntax errors

  unit_tests:
    name: "2️⃣ Unit tests"
    needs:
      - "byte_level"
      - "syntax_errors"
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.0"
          - "8.1"
        dependencies:
          - "lowest"
          - "highest"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "xdebug"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Execute unit tests"
        run: "composer exec -- phpunit --configuration tests/phpunit.xml --coverage-clover coverage.xml"

      - name: "Upload coverage to Codecov"
        uses: "codecov/codecov-action@v3"
        with:
          files: "coverage.xml"
          flags: "unittests"
          fail_ci_if_error: true

  static_analysis:
    name: "3️⃣ Static Analysis"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "8.0"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check JSON files"
        run: |
          find . -type f -name '*.json' | xargs -t -L 1 -- php -r 'json_decode(file_get_contents($argv[1]), null, 512, JSON_THROW_ON_ERROR);'

      - name: "Validate Composer configuration"
        run: "composer validate --no-interaction --strict"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check PSR-4 mapping"
        run: "composer dump-autoload --no-interaction --optimize --strict-psr"

      - name: "Perform static analysis"
        run: "composer exec -- phpstan"
        # @TODO Cognitive Complexity, Mess Detector, Magic Number Detector, Copy-Paste Detector

  coding_standards:
    name: "4️⃣ Coding Standards"
    needs:
      - "byte_level"
      - "syntax_errors"
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "8.0"
          - "8.1"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check EditorConfig configuration"
        run: "test -f .editorconfig"

      - name: "Check adherence to EditorConfig"
        uses: "greut/eclint-action@v0"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check coding style"
        run: "composer exec -- phpcs"

  exported_files:
    name: "5️⃣ Exported files"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check exported files"
        run: |
          EXPECTED="LICENSE.md,README.md,composer.json"
          CURRENT="$(git archive HEAD | tar --list --exclude="src" --exclude="src/*" --exclude="config" --exclude="config/*" | paste --serial --delimiters=",")"
          echo "CURRENT =${CURRENT}"
          echo "EXPECTED=${EXPECTED}"
          test "${CURRENT}" = "${EXPECTED}"

  spelling:
    name: "Spelling"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Cache pip"
        uses: "actions/cache@v3"
        with:
          path: "~/.cache/pip"
          key: "${{ runner.os }}-pip-codespell"

      - name: "Install codespell"
        run: |
          pip install --user 'codespell>=2.2'

      - name: "Search for misspellings"
        run: |
          "$(python -m site --user-base)/bin/codespell"
